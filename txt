<!DOCTYPE html >
    <html lang="en" >
        <head>
        <meta charset="UTF-8" >
            <meta name="viewport" content = "width=device-width, initial-scale=1.0" >
                <title>GroupVault - React Group Expense Tracker </title>
                    < script src = "https://unpkg.com/react@18/umd/react.development.js" > </script>
                        < script src = "https://unpkg.com/react-dom@18/umd/react-dom.development.js" > </script>
                            < script src = "https://unpkg.com/@babel/standalone/babel.min.js" > </script>
                                < script src = "https://cdn.tailwindcss.com" > </script>
                                    < link href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel = "stylesheet" >
                                        <style>
                                        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
        * {
    font- family: 'Inter', sans - serif; 
        }
        
        body {
    background: linear - gradient(135deg, #667eea 0 %, #764ba2 100 %);
    min - height: 100vh;
}
        
        .glass - morphism {
    background: rgba(255, 255, 255, 0.25);
    backdrop - filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.18);
    box - shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
}
        
        .card - hover {
    transition: all 0.3s cubic - bezier(0.4, 0, 0.2, 1);
}
        
        .card - hover:hover {
    transform: translateY(-8px);
    box - shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}
        
        .gradient - text {
    background: linear - gradient(135deg, #667eea 0 %, #764ba2 100 %);
    -webkit - background - clip: text;
    -webkit - text - fill - color: transparent;
    background - clip: text;
}
        
        .btn - primary {
    background: linear - gradient(135deg, #667eea 0 %, #764ba2 100 %);
    transition: all 0.3s ease;
}
        
        .btn - primary:hover {
    transform: translateY(-2px);
    box - shadow: 0 10px 20px rgba(102, 126, 234, 0.4);
}
        
        .expense - item {
    transition: all 0.2s ease;
}
        
        .expense - item:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(5px);
}
        
        .balance - positive {
    background: linear - gradient(135deg, #10b981, #059669);
    color: white;
}
        
        .balance - negative {
    background: linear - gradient(135deg, #ef4444, #dc2626);
    color: white;
}
        
        .balance - neutral {
    background: linear - gradient(135deg, #6b7280, #4b5563);
    color: white;
}
        
        .modal - backdrop {
    background: rgba(0, 0, 0, 0.5);
    backdrop - filter: blur(5px);
}
        
        .slide -in {
    animation: slideIn 0.3s ease- out;
        }

@keyframes slideIn {
            from {
        opacity: 0;
        transform: translateY(-20px);
    }
            to {
        opacity: 1;
        transform: translateY(0);
    }
}
        
        .fade -in {
    animation: fadeIn 0.5s ease- out;
        }

@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
}
        
        .pulse - glow {
    animation: pulseGlow 2s infinite;
}

@keyframes pulseGlow {
    0 %, 100 % { box- shadow: 0 0 20px rgba(102, 126, 234, 0.3);
}
50 % { box- shadow: 0 0 30px rgba(102, 126, 234, 0.6); }
        }
        
        .split - option {
    transition: all 0.2s ease;
    cursor: pointer;
}
        
        .split - option:hover {
    background: rgba(102, 126, 234, 0.1);
}
        
        .split - option.active {
    background: linear - gradient(135deg, #667eea, #764ba2);
    color: white;
}
        
        .member - avatar {
    transition: transform 0.2s ease;
}
        
        .member - avatar:hover {
    transform: scale(1.1);
}

        .chart - container {
    position: relative;
}

        .chart - tooltip {
    position: absolute;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border - radius: 8px;
    font - size: 12px;
    pointer - events: none;
    z - index: 1000;
    opacity: 0;
    transition: opacity 0.2s;
}

        .progress - bar {
    animation: progressFill 1s ease - out;
}

@keyframes progressFill {
            from { width: 0 %; }
}
</style>
    </head>
    < body >
    <div id="root" > </div>

        < script type = "text/babel" >
        const { useState, useEffect, useCallback, useMemo, createContext, useContext } = React;

// Context for global state management
const AppContext = createContext();

// Custom hooks
const useLocalStorage = (key, initialValue) => {
    const [storedValue, setStoredValue] = useState(() => {
        try {
            const item = window.localStorage.getItem(key);
            return item ? JSON.parse(item) : initialValue;
        } catch (error) {
            console.error('Error reading from localStorage:', error);
            return initialValue;
        }
    });

    const setValue = useCallback((value) => {
        try {
            setStoredValue(value);
            window.localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
            console.error('Error saving to localStorage:', error);
        }
    }, [key]);

    return [storedValue, setValue];
};

const useNotification = () => {
    const showNotification = useCallback((message, type = 'info') => {
        const notification = document.createElement('div');
        const bgColor = type === 'success' ? 'bg-green-500' :
            type === 'error' ? 'bg-red-500' : 'bg-blue-500';

        notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium ${bgColor} transform translate-x-full transition-transform duration-300`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);

        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }, []);

    return { showNotification };
};

// Utility functions
const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'INR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
};

const generateInviteCode = () => {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
};

const getInitials = (name) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
};

const getAvatarColor = (name) => {
    const colors = [
        'from-red-400 to-red-600',
        'from-blue-400 to-blue-600',
        'from-green-400 to-green-600',
        'from-purple-400 to-purple-600',
        'from-yellow-400 to-yellow-600',
        'from-pink-400 to-pink-600',
        'from-indigo-400 to-indigo-600',
        'from-teal-400 to-teal-600'
    ];
    const index = name.charCodeAt(0) % colors.length;
    return colors[index];
};

const getCategoryIcon = (category) => {
    const icons = {
        'Food & Dining': '🍽️',
        'Transportation': '🚗',
        'Shopping': '🛍️',
        'Entertainment': '🎬',
        'Bills & Utilities': '⚡',
        'Healthcare': '🏥',
        'Education': '📚',
        'Travel': '✈️',
        'Accommodation': '🏨',
        'Other': '📦'
    };
    return icons[category] || '📦';
};

const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
    });
};

// Chart Components
const ExpenseChart = ({ data, type = 'category' }) => {
    const chartId = `chart-${type}-${Math.random().toString(36).substr(2, 9)}`;

    useEffect(() => {
        const canvas = document.getElementById(chartId);
        if (!canvas || !data.length) return;

        const ctx = canvas.getContext('2d');
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = Math.min(centerX, centerY) - 20;

        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        const total = data.reduce((sum, item) => sum + item.value, 0);
        let currentAngle = -Math.PI / 2;

        // Draw pie slices
        data.forEach((item, index) => {
            const sliceAngle = (item.value / total) * 2 * Math.PI;

            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
            ctx.closePath();
            ctx.fillStyle = item.color;
            ctx.fill();

            // Add stroke
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 2;
            ctx.stroke();

            currentAngle += sliceAngle;
        });

        // Draw center circle for donut effect
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius * 0.4, 0, 2 * Math.PI);
        ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
        ctx.fill();

    }, [data, chartId]);

    if (!data.length) {
        return (
            <div className= "flex items-center justify-center h-48 text-white/60" >
            <div className="text-center" >
                <i className="fas fa-chart-pie text-3xl mb-2" > </i>
                    < p > No data available </p>
                        </div>
                        </div>
                );
            }

return (
    <div className= "flex items-center space-x-6" >
    <canvas id={ chartId } width = "200" height = "200" className = "flex-shrink-0" > </canvas>
        < div className = "space-y-2 flex-1" >
        {
            data.map((item, index) => (
                <div key= { index } className = "flex items-center justify-between" >
                <div className="flex items-center space-x-2" >
            <div 
                                        className="w-4 h-4 rounded-full" 
                                        style = {{ backgroundColor: item.color }}
            > </div>
            < span className = "text-white text-sm flex items-center" >
                <span className="mr-2" > { item.icon } </span>
{ item.label }
</span>
    </div>
    < div className = "text-right" >
        <p className="text-white font-medium" > { formatCurrency(item.value) } </p>
            < p className = "text-white/60 text-xs" >
                {((item.value / data.reduce((sum, d) => sum + d.value, 0)) * 100).toFixed(1)}%
                    </p>
                    </div>
                    </div>
                        ))}
</div>
    </div>
            );
        };

const ExpenseTimeline = ({ expenses }) => {
    const timelineData = useMemo(() => {
        const grouped = expenses.reduce((acc, expense) => {
            const date = expense.date;
            if (!acc[date]) {
                acc[date] = { date, total: 0, count: 0, expenses: [] };
            }
            acc[date].total += expense.amount;
            acc[date].count += 1;
            acc[date].expenses.push(expense);
            return acc;
        }, {});

        return Object.values(grouped).sort((a, b) => new Date(a.date) - new Date(b.date));
    }, [expenses]);

    const maxAmount = Math.max(...timelineData.map(d => d.total), 1);

    return (
        <div className= "space-y-4" >
        <h4 className="text-lg font-semibold text-white mb-4" >📊 Daily Spending Timeline </h4>
    {
        timelineData.map((day, index) => (
            <div key= { day.date } className = "relative" >
            <div className="flex items-center space-x-4" >
        <div className="flex-shrink-0 w-20 text-right" >
        <p className="text-white/80 text-sm font-medium" >
        { new Date(day.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) }
        </p>
        </div>
        < div className = "flex-1" >
        <div className="bg-white/10 rounded-full h-6 relative overflow-hidden" >
        <div 
                                            className="progress-bar bg-gradient-to-r from-purple-400 to-pink-400 h-full rounded-full transition-all duration-500"
                                            style = {{ width: `${(day.total / maxAmount) * 100}%` }}
                                        > </div>
        < div className = "absolute inset-0 flex items-center justify-between px-3" >
            <span className="text-white text-xs font-medium" >
                { day.count } expense{ day.count !== 1 ? 's' : '' }
    </span>
        < span className = "text-white text-xs font-bold" >
            { formatCurrency(day.total) }
            </span>
            </div>
            </div>
            </div>
            </div>
            </div>
                    ))}
</div>
            );
        };

const MemberSpendingChart = ({ memberData }) => {
    const maxSpending = Math.max(...memberData.map(d => d.total), 1);

    return (
        <div className= "space-y-4" >
        <h4 className="text-lg font-semibold text-white mb-4" >💳 Who Paid What </h4>
    {
        memberData.map((data, index) => (
            <div key= { data.member.id } className = "flex items-center space-x-4" >
            <Avatar name={ data.member.name } size = "sm" />
            <div className="flex-1" >
        <div className="flex items-center justify-between mb-1" >
        <span className="text-white font-medium" > { data.member.name } </span>
        < span className = "text-white font-bold" > { formatCurrency(data.total)
    } </span>
        </div>
        < div className = "bg-white/10 rounded-full h-3 relative overflow-hidden" >
            <div 
                                        className={
        `progress-bar h-full rounded-full transition-all duration-500 ${index === 0 ? 'bg-gradient-to-r from-yellow-400 to-orange-400' :
            index === 1 ? 'bg-gradient-to-r from-green-400 to-blue-400' :
                'bg-gradient-to-r from-purple-400 to-pink-400'
        }`
    }
    style = {{ width: `${(data.total / maxSpending) * 100}%` }
}
                                    > </div>
    </div>
    < p className = "text-white/60 text-xs mt-1" >
        { data.count } payment{ data.count !== 1 ? 's' : '' } • { ((data.total / memberData.reduce((sum, m) => sum + m.total, 0)) * 100).toFixed(1) }% of total
            </p>
            </div>
            </div>
                    ))}
</div>
            );
        };

const ExpenseInsights = ({ group }) => {
    const insights = useMemo(() => {
        const totalExpenses = group.expenses.reduce((sum, exp) => sum + exp.amount, 0);
        const avgExpense = totalExpenses / (group.expenses.length || 1);
        const avgPerPerson = totalExpenses / group.members.length;

        const categoryTotals = group.expenses.reduce((acc, exp) => {
            acc[exp.category] = (acc[exp.category] || 0) + exp.amount;
            return acc;
        }, {});

        const topCategory = Object.entries(categoryTotals).sort((a, b) => b[1] - a[1])[0];

        const dailySpending = group.expenses.reduce((acc, exp) => {
            const date = exp.date;
            acc[date] = (acc[date] || 0) + exp.amount;
            return acc;
        }, {});

        const maxSpendingDay = Object.entries(dailySpending).sort((a, b) => b[1] - a[1])[0];

        return {
            totalExpenses,
            avgExpense,
            avgPerPerson,
            topCategory: topCategory ? { name: topCategory[0], amount: topCategory[1] } : null,
            maxSpendingDay: maxSpendingDay ? { date: maxSpendingDay[0], amount: maxSpendingDay[1] } : null,
            expenseCount: group.expenses.length
        };
    }, [group]);

    return (
        <div className= "grid grid-cols-2 md:grid-cols-3 gap-4" >
        <div className="glass-morphism rounded-xl p-4 text-center" >
            <div className="text-2xl mb-2" >💰</div>
                < p className = "text-white/70 text-sm" > Total Spent </p>
                    < p className = "text-white font-bold text-lg" > { formatCurrency(insights.totalExpenses) } </p>
                        </div>

                        < div className = "glass-morphism rounded-xl p-4 text-center" >
                            <div className="text-2xl mb-2" >📊</div>
                                < p className = "text-white/70 text-sm" > Avg per Expense </p>
                                    < p className = "text-white font-bold text-lg" > { formatCurrency(insights.avgExpense) } </p>
                                        </div>

                                        < div className = "glass-morphism rounded-xl p-4 text-center" >
                                            <div className="text-2xl mb-2" >👥</div>
                                                < p className = "text-white/70 text-sm" > Avg per Person </p>
                                                    < p className = "text-white font-bold text-lg" > { formatCurrency(insights.avgPerPerson) } </p>
                                                        </div>

    {
        insights.topCategory && (
            <div className="glass-morphism rounded-xl p-4 text-center" >
                <div className="text-2xl mb-2" > { getCategoryIcon(insights.topCategory.name) } </div>
                    < p className = "text-white/70 text-sm" > Top Category </p>
                        < p className = "text-white font-bold text-sm" > { insights.topCategory.name } </p>
                            < p className = "text-white/80 text-xs" > { formatCurrency(insights.topCategory.amount) } </p>
                                </div>
                    )}

{
    insights.maxSpendingDay && (
        <div className="glass-morphism rounded-xl p-4 text-center" >
            <div className="text-2xl mb-2" >📅</div>
                < p className = "text-white/70 text-sm" > Biggest Day </p>
                    < p className = "text-white font-bold text-sm" > { formatDate(insights.maxSpendingDay.date) } </p>
                        < p className = "text-white/80 text-xs" > { formatCurrency(insights.maxSpendingDay.amount) } </p>
                            </div>
                    )
}

<div className="glass-morphism rounded-xl p-4 text-center" >
    <div className="text-2xl mb-2" >🧾</div>
        < p className = "text-white/70 text-sm" > Total Expenses </p>
            < p className = "text-white font-bold text-lg" > { insights.expenseCount } </p>
                </div>
                </div>
            );
        };

// Components
const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;

    return (
        <div className= "fixed inset-0 z-50 flex items-center justify-center modal-backdrop" >
        <div className="glass-morphism rounded-2xl p-6 w-full max-w-md mx-4 slide-in" >
            <div className="flex items-center justify-between mb-6" >
                <h2 className="text-xl font-bold text-white" > { title } </h2>
                    < button
    onClick = { onClose }
    className = "text-white/70 hover:text-white transition-colors"
        >
        <i className="fas fa-times text-lg" > </i>
            </button>
            </div>
    { children }
    </div>
        </div>
            );
        };

const Button = ({ variant = 'primary', size = 'md', children, className = '', ...props }) => {
    const baseClasses = 'font-semibold rounded-xl transition-all duration-200 flex items-center justify-center';
    const variants = {
        primary: 'btn-primary text-white',
        secondary: 'glass-morphism text-white hover:bg-white/30',
        danger: 'bg-red-500 hover:bg-red-600 text-white'
    };
    const sizes = {
        sm: 'px-3 py-2 text-sm',
        md: 'px-4 py-3',
        lg: 'px-6 py-4 text-lg'
    };

    return (
        <button 
                    className= {`${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`
}
{...props }
                >
    { children }
    </button>
            );
        };

const Input = ({ label, icon, className = '', ...props }) => {
    return (
        <div className= "space-y-2" >
        { label && <label className="block text-sm font-medium text-white/90" > { label } </label>
}
<div className="relative" >
    { icon && (
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/60" >
            <i className={ icon }> </i>
                </div>
                        )}
<input
                            className={ `w-full glass-morphism rounded-xl px-4 py-3 text-white placeholder-white/60 border-0 focus:ring-2 focus:ring-white/30 transition-all ${icon ? 'pl-10' : ''} ${className}` }
{...props }
                        />
    </div>
    </div>
            );
        };

const Select = ({ label, options, className = '', ...props }) => {
    return (
        <div className= "space-y-2" >
        { label && <label className="block text-sm font-medium text-white/90" > { label } </label>
}
<select
                        className={ `w-full glass-morphism rounded-xl px-4 py-3 text-white border-0 focus:ring-2 focus:ring-white/30 transition-all ${className}` }
{...props }
                    >
{
    options.map(option => (
        <option key= { option.value } value = { option.value } className = "bg-gray-800" >
        { option.label }
        </option>
    ))
}
    </select>
    </div>
            );
        };

const Avatar = ({ name, size = 'md', className = '' }) => {
    const sizes = {
        sm: 'w-8 h-8 text-xs',
        md: 'w-10 h-10 text-sm',
        lg: 'w-12 h-12 text-base'
    };

    return (
        <div className= {`member-avatar bg-gradient-to-r ${getAvatarColor(name)} rounded-full flex items-center justify-center text-white font-bold ${sizes[size]} ${className}`
}>
    { getInitials(name) }
    </div>
            );
        };

const CreateGroupModal = ({ isOpen, onClose, onCreateGroup }) => {
    const [formData, setFormData] = useState({
        name: '',
        description: '',
        type: 'trip'
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        const newGroup = {
            id: Date.now(),
            ...formData,
            inviteCode: generateInviteCode(),
            members: [
                { id: 1, name: 'You', email: 'you@example.com', isAdmin: true }
            ],
            expenses: [],
            createdAt: new Date().toISOString()
        };
        onCreateGroup(newGroup);
        setFormData({ name: '', description: '', type: 'trip' });
        onClose();
    };

    const groupTypes = [
        { value: 'trip', label: '🏖️ Trip' },
        { value: 'home', label: '🏠 Home' },
        { value: 'couple', label: '💑 Couple' },
        { value: 'friends', label: '👥 Friends' },
        { value: 'work', label: '💼 Work' },
        { value: 'other', label: '📦 Other' }
    ];

    return (
        <Modal isOpen= { isOpen } onClose = { onClose } title = "Create New Group" >
            <form onSubmit={ handleSubmit } className = "space-y-4" >
                <Input
                            label="Group Name"
    icon = "fas fa-users"
    value = { formData.name }
    onChange = {(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
placeholder = "e.g., Goa Trip 2024"
required
    />

    <div className="space-y-2" >
        <label className="block text-sm font-medium text-white/90" > Description(Optional) </label>
            < textarea
value = { formData.description }
onChange = {(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
placeholder = "Brief description of the group"
rows = "3"
className = "w-full glass-morphism rounded-xl px-4 py-3 text-white placeholder-white/60 border-0 focus:ring-2 focus:ring-white/30 transition-all resize-none"
    />
    </div>

    < Select
label = "Group Type"
options = { groupTypes }
value = { formData.type }
onChange = {(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}
                        />

    < div className = "flex space-x-3 pt-4" >
        <Button variant="secondary" onClick = { onClose } className = "flex-1" >
            Cancel
            </Button>
            < Button type = "submit" className = "flex-1" >
                Create Group
                    </Button>
                    </div>
                    </form>
                    </Modal>
            );
        };

const JoinGroupModal = ({ isOpen, onClose, onJoinGroup }) => {
    const [inviteCode, setInviteCode] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        onJoinGroup(inviteCode.toUpperCase());
        setInviteCode('');
        onClose();
    };

    return (
        <Modal isOpen= { isOpen } onClose = { onClose } title = "Join Group" >
            <form onSubmit={ handleSubmit } className = "space-y-4" >
                <Input
                            label="Invite Code"
    icon = "fas fa-key"
    value = { inviteCode }
    onChange = {(e) => setInviteCode(e.target.value)}
placeholder = "Enter 6-digit code"
maxLength = "6"
className = "text-center text-lg font-mono tracking-widest"
required
    />

    <div className="flex space-x-3 pt-4" >
        <Button variant="secondary" onClick = { onClose } className = "flex-1" >
            Cancel
            </Button>
            < Button type = "submit" className = "flex-1 bg-green-500 hover:bg-green-600" >
                <i className="fas fa-sign-in-alt mr-2" > </i>
                                Join Group
    </Button>
    </div>
    </form>
    </Modal>
            );
        };

const AddExpenseModal = ({ isOpen, onClose, group, onAddExpense }) => {
    const [formData, setFormData] = useState({
        description: '',
        amount: '',
        category: '',
        paidBy: '',
        splitType: 'equal',
        splitDetails: {}
    });

    useEffect(() => {
        if (group && group.members.length > 0) {
            setFormData(prev => ({
                ...prev,
                paidBy: group.members[0].id.toString(),
                splitDetails: group.members.reduce((acc, member) => {
                    acc[member.id] = { included: true, amount: 0 };
                    return acc;
                }, {})
            }));
        }
    }, [group]);

    const handleSubmit = (e) => {
        e.preventDefault();

        const expense = {
            id: Date.now(),
            description: formData.description,
            amount: parseFloat(formData.amount),
            category: formData.category,
            paidBy: parseInt(formData.paidBy),
            splitType: formData.splitType,
            splitDetails: formData.splitDetails,
            date: new Date().toISOString().split('T')[0],
            timestamp: new Date().toISOString()
        };

        onAddExpense(expense);
        setFormData({
            description: '',
            amount: '',
            category: '',
            paidBy: group?.members[0]?.id.toString() || '',
            splitType: 'equal',
            splitDetails: {}
        });
        onClose();
    };

    const categories = [
        { value: '', label: 'Select Category' },
        { value: 'Food & Dining', label: '🍽️ Food & Dining' },
        { value: 'Transportation', label: '🚗 Transportation' },
        { value: 'Accommodation', label: '🏨 Accommodation' },
        { value: 'Entertainment', label: '🎬 Entertainment' },
        { value: 'Shopping', label: '🛍️ Shopping' },
        { value: 'Bills & Utilities', label: '⚡ Bills & Utilities' },
        { value: 'Healthcare', label: '🏥 Healthcare' },
        { value: 'Travel', label: '✈️ Travel' },
        { value: 'Other', label: '📦 Other' }
    ];

    const memberOptions = group?.members.map(member => ({
        value: member.id.toString(),
        label: member.name
    })) || [];

    const handleSplitTypeChange = (type) => {
        setFormData(prev => ({
            ...prev,
            splitType: type,
            splitDetails: group.members.reduce((acc, member) => {
                acc[member.id] = {
                    included: true,
                    amount: type === 'equal' ? parseFloat(prev.amount || 0) / group.members.length : 0
                };
                return acc;
            }, {})
        }));
    };

    if (!group) return null;

    return (
        <Modal isOpen= { isOpen } onClose = { onClose } title = "Add Group Expense" >
            <div className="max-h-96 overflow-y-auto" >
                <form onSubmit={ handleSubmit } className = "space-y-4" >
                    <div className="grid grid-cols-2 gap-4" >
                        <Input
                                    label="Description"
    value = { formData.description }
    onChange = {(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
placeholder = "What was this for?"
required
    />

    <Input
                                    label="Amount"
type = "number"
step = "0.01"
icon = "fas fa-rupee-sign"
value = { formData.amount }
onChange = {(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}
placeholder = "0.00"
required
    />
    </div>

    < div className = "grid grid-cols-2 gap-4" >
        <Select
                                    label="Category"
options = { categories }
value = { formData.category }
onChange = {(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
required
    />

    <Select
                                    label="Paid By"
options = { memberOptions }
value = { formData.paidBy }
onChange = {(e) => setFormData(prev => ({ ...prev, paidBy: e.target.value }))}
required
    />
    </div>

    < div >
    <label className="block text-sm font-medium text-white/90 mb-3" > Split Method </label>
        < div className = "grid grid-cols-3 gap-2" >
        {
            [
            { type: 'equal', icon: 'fas fa-equals', label: 'Equal', desc: 'Split equally' },
            { type: 'custom', icon: 'fas fa-edit', label: 'Custom', desc: 'Custom amounts' },
            { type: 'percentage', icon: 'fas fa-percentage', label: 'Percent', desc: 'By percentage' }
            ].map(option => (
                <div
                                            key= { option.type }
                                            className = {`split-option p-3 rounded-xl border-2 text-center cursor-pointer ${formData.splitType === option.type
                        ? 'active border-white'
                        : 'glass-morphism border-white/20'
                    }`}
onClick = {() => handleSplitTypeChange(option.type)}
                                        >
    <i className={ `${option.icon} text-lg mb-1` }> </i>
        < p className = "font-medium text-sm" > { option.label } </p>
            < p className = "text-xs opacity-70" > { option.desc } </p>
                </div>
                                    ))}
</div>
    </div>

    < div className = "flex space-x-3 pt-4" >
        <Button variant="secondary" onClick = { onClose } className = "flex-1" >
            Cancel
            </Button>
            < Button type = "submit" className = "flex-1" >
                Add Expense
                    </Button>
                    </div>
                    </form>
                    </div>
                    </Modal>
            );
        };

const GroupCard = ({ group, onClick }) => {
    const totalExpenses = group.expenses.reduce((sum, expense) => sum + expense.amount, 0);
    const yourBalance = 0; // Calculate based on actual logic

    return (
        <div 
                    className= "glass-morphism rounded-2xl p-6 card-hover cursor-pointer fade-in"
    onClick = {() => onClick(group)}
                >
    <div className="flex items-start justify-between mb-4" >
        <div className="flex-1" >
            <h3 className="text-lg font-bold text-white mb-1" > { group.name } </h3>
                < p className = "text-white/70 text-sm mb-2" > { group.description } </p>
                    < div className = "flex items-center space-x-4 text-xs text-white/60" >
                        <span><i className="fas fa-users mr-1" > </i>{group.members.length} members</span >
                            <span><i className="fas fa-receipt mr-1" > </i>{group.expenses.length} expenses</span >
                                </div>
                                </div>
                                < div className = "text-right" >
                                    <p className="text-white/70 text-sm" > Total Spent </p>
                                        < p className = "text-xl font-bold text-white" > { formatCurrency(totalExpenses) } </p>
                                            </div>
                                            </div>

                                            < div className = "flex items-center justify-between" >
                                                <div className="flex -space-x-2" >
                                                {
                                                    group.members.slice(0, 4).map(member => (
                                                        <Avatar key= { member.id } name = { member.name } size = "sm" className = "border-2 border-white/20" />
                            ))
                                                }
{
    group.members.length > 4 && (
        <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center text-white text-xs font-bold border-2 border-white/20" >
            +{ group.members.length - 4 }
            </div>
                            )
}
</div>

    < div className = "text-right" >
        <p className="text-white/70 text-xs" > Your Balance </p>
            < p className = {`text-sm font-bold px-2 py-1 rounded-lg ${yourBalance > 0 ? 'balance-positive' :
                    yourBalance < 0 ? 'balance-negative' : 'balance-neutral'
                }`}>
                    { yourBalance > 0 ? '+' : ''}{ formatCurrency(Math.abs(yourBalance)) }
</p>
    </div>
    </div>
    </div>
            );
        };

const GroupsList = ({ groups, onGroupClick, onCreateGroup, onJoinGroup }) => {
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [showJoinModal, setShowJoinModal] = useState(false);

    return (
        <div className= "space-y-6 fade-in" >
        <div className="flex items-center justify-between" >
            <h2 className="text-3xl font-bold text-white" > Your Groups </h2>
                < div className = "flex space-x-3" >
                    <Button variant="secondary" onClick = {() => setShowJoinModal(true)}>
                        <i className="fas fa-sign-in-alt mr-2" > </i>Join Group
                            </Button>
                            < Button onClick = {() => setShowCreateModal(true)}>
                                <i className="fas fa-plus mr-2" > </i>Create Group
                                    </Button>
                                    </div>
                                    </div>

{
    groups.length === 0 ? (
        <div className= "glass-morphism rounded-2xl p-12 text-center" >
        <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-6 pulse-glow" >
            <i className="fas fa-users text-white text-2xl" > </i>
                </div>
                < h3 className = "text-xl font-bold text-white mb-2" > No groups yet </h3>
                    < p className = "text-white/70 mb-6" > Create your first group to start splitting expenses with friends.</p>
                    < Button onClick = {() => setShowCreateModal(true)
} size = "lg" >
    <i className="fas fa-plus mr-2" > </i>Create Your First Group
        </Button>
        </div>
                    ) : (
    <div className= "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" >
    {
        groups.map(group => (
            <GroupCard key= { group.id } group = { group } onClick = { onGroupClick } />
                            ))
    }
    </div>
                    )}

<CreateGroupModal
                        isOpen={ showCreateModal }
onClose = {() => setShowCreateModal(false)}
onCreateGroup = { onCreateGroup }
    />

    <JoinGroupModal
                        isOpen={ showJoinModal }
onClose = {() => setShowJoinModal(false)}
onJoinGroup = { onJoinGroup }
    />
    </div>
            );
        };

const GroupDetail = ({ group, onBack, onAddExpense, onDeleteGroup, onLeaveGroup }) => {
    const [showAddExpense, setShowAddExpense] = useState(false);
    const [showInviteModal, setShowInviteModal] = useState(false);
    const [showGroupSettings, setShowGroupSettings] = useState(false);
    const [activeTab, setActiveTab] = useState('overview');
    const { showNotification } = useNotification();

    const currentUser = group.members.find(m => m.name === 'You');
    const canDeleteGroup = currentUser?.isAdmin;
    const canLeaveGroup = !currentUser?.isAdmin;

    const copyInviteCode = () => {
        navigator.clipboard.writeText(group.inviteCode);
        showNotification('Invite code copied to clipboard!', 'success');
    };

    const handleDeleteGroup = () => {
        if (window.confirm(`Are you sure you want to delete "${group.name}"? This action cannot be undone and all expenses will be lost.`)) {
            onDeleteGroup(group.id);
            showNotification('Group deleted successfully', 'success');
            onBack();
        }
    };

    const handleLeaveGroup = () => {
        if (window.confirm(`Are you sure you want to leave "${group.name}"? You'll need a new invite code to rejoin.`)) {
            onLeaveGroup(group.id);
            showNotification('Left group successfully', 'success');
            onBack();
        }
    };

    const calculateBalances = () => {
        const balances = {};
        group.members.forEach(member => {
            balances[member.id] = 0;
        });

        group.expenses.forEach(expense => {
            balances[expense.paidBy] += expense.amount;

            const includedMembers = Object.entries(expense.splitDetails).filter(([_, details]) => details.included);
            const splitAmount = expense.amount / includedMembers.length;

            includedMembers.forEach(([memberId, _]) => {
                balances[parseInt(memberId)] -= splitAmount;
            });
        });

        return balances;
    };

    const balances = calculateBalances();

    // Analytics data
    const categoryData = useMemo(() => {
        const categories = {};
        group.expenses.forEach(expense => {
            if (!categories[expense.category]) {
                categories[expense.category] = 0;
            }
            categories[expense.category] += expense.amount;
        });

        const colors = ['#8B5CF6', '#06B6D4', '#10B981', '#F59E0B', '#EF4444', '#EC4899', '#6366F1', '#84CC16'];
        return Object.entries(categories).map(([category, amount], index) => ({
            label: category,
            value: amount,
            color: colors[index % colors.length],
            icon: getCategoryIcon(category)
        })).sort((a, b) => b.value - a.value);
    }, [group.expenses]);

    const memberSpendingData = useMemo(() => {
        return group.members.map(member => {
            const memberExpenses = group.expenses.filter(exp => exp.paidBy === member.id);
            const total = memberExpenses.reduce((sum, exp) => sum + exp.amount, 0);
            return {
                member,
                total,
                count: memberExpenses.length
            };
        }).sort((a, b) => b.total - a.total);
    }, [group.members, group.expenses]);

    return (
        <div className= "space-y-6 fade-in" >
        <div className="flex items-center justify-between" >
            <div className="flex items-center space-x-4" >
                <Button variant="secondary" onClick = { onBack } size = "sm" >
                    <i className="fas fa-arrow-left" > </i>
                        </Button>
                        < div >
                        <h2 className="text-3xl font-bold text-white" > { group.name } </h2>
                            < p className = "text-white/70" > { group.description } </p>
                                </div>
                                </div>
                                < div className = "flex space-x-3" >
                                    <Button variant="secondary" onClick = {() => setShowInviteModal(true)}>
                                        <i className="fas fa-user-plus mr-2" > </i>Invite
                                            </Button>
                                            < Button variant = "secondary" onClick = {() => setShowGroupSettings(true)}>
                                                <i className="fas fa-cog mr-2" > </i>Settings
                                                    </Button>
                                                    < Button onClick = {() => setShowAddExpense(true)}>
                                                        <i className="fas fa-plus mr-2" > </i>Add Expense
                                                            </Button>
                                                            </div>
                                                            </div>

{/* Navigation Tabs */ }
<div className="glass-morphism rounded-2xl p-2" >
    <div className="flex space-x-2" >
    {
        [
        { id: 'overview', label: 'Overview', icon: 'fas fa-home' },
        { id: 'analytics', label: 'Analytics', icon: 'fas fa-chart-bar' },
        { id: 'expenses', label: 'Expenses', icon: 'fas fa-receipt' }
        ].map(tab => (
            <button
                                    key= { tab.id }
                                    onClick = {() => setActiveTab(tab.id)}
className = {`flex-1 px-4 py-3 rounded-xl transition-all ${activeTab === tab.id
        ? 'btn-primary text-white'
        : 'text-white/70 hover:text-white hover:bg-white/10'
    }`}
                                >
    <i className={ `${tab.icon} mr-2` }> </i>
{ tab.label }
</button>
                            ))}
</div>
    </div>

{/* Tab Content */ }
{
    activeTab === 'overview' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6" >
            {/* Group Summary */ }
            < div className = "glass-morphism rounded-2xl p-6" >
                <h3 className="text-lg font-bold text-white mb-4" > Group Summary </h3>
                    < div className = "space-y-4" >
                        <div className="flex justify-between" >
                            <span className="text-white/70" > Total Expenses </span>
                                < span className = "font-bold text-white" >
                                    { formatCurrency(group.expenses.reduce((sum, exp) => sum + exp.amount, 0)) }
                                    </span>
                                    </div>
                                    < div className = "flex justify-between" >
                                        <span className="text-white/70" > Members </span>
                                            < span className = "font-bold text-white" > { group.members.length } </span>
                                                </div>
                                                < div className = "flex justify-between" >
                                                    <span className="text-white/70" > Invite Code </span>
                                                        < button
    onClick = { copyInviteCode }
    className = "font-mono font-bold text-yellow-300 hover:text-yellow-200 transition-colors"
        >
        { group.inviteCode }
        </button>
        </div>
        </div>
        </div>

    {/* Member Balances */ }
    <div className="lg:col-span-2 glass-morphism rounded-2xl p-6" >
        <h3 className="text-lg font-bold text-white mb-4" > Member Balances </h3>
            < div className = "space-y-3" >
            {
                group.members.map(member => {
                    const balance = balances[member.id] || 0;
                    return (
                        <div key= { member.id } className = "flex items-center justify-between p-3 bg-white/10 rounded-xl" >
                            <div className="flex items-center space-x-3" >
                                <Avatar name={ member.name } />
                                    < div >
                                    <p className="font-medium text-white" > { member.name } </p>
                                        < p className = "text-sm text-white/60" > { member.email } </p>
                                            </div>
                                            </div>
                                            < div className = "text-right" >
                                                <p className={
                                                    `font-bold px-3 py-1 rounded-lg text-sm ${balance > 0 ? 'balance-positive' :
                                                        balance < 0 ? 'balance-negative' : 'balance-neutral'
                                                    }`
                    }>
                        { balance > 0 ? 'Gets ' : balance < 0 ? 'Owes ' : ''
                }
                                                        { formatCurrency(Math.abs(balance))
            }
                </p>
                </div>
                </div>
                                        );
})}
</div>
    </div>
    </div>
                    )}

{
    activeTab === 'analytics' && (
        <div className="space-y-6" >
            {/* Expense Insights */ }
            < ExpenseInsights group = { group } />

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6" >
                    {/* Category Breakdown */ }
                    < div className = "glass-morphism rounded-2xl p-6" >
                        <h3 className="text-lg font-bold text-white mb-4" >💰 Spending by Category </h3>
                            < ExpenseChart data = { categoryData } type = "category" />
                                </div>

    {/* Member Spending */ }
    <div className="glass-morphism rounded-2xl p-6" >
        <MemberSpendingChart memberData={ memberSpendingData } />
            </div>
            </div>

    {/* Timeline */ }
    <div className="glass-morphism rounded-2xl p-6" >
        <ExpenseTimeline expenses={ group.expenses } />
            </div>
            </div>
                    )
}

{
    activeTab === 'expenses' && (
        <div className="glass-morphism rounded-2xl p-6" >
            <h3 className="text-lg font-bold text-white mb-4" > All Expenses </h3>
    {
        group.expenses.length === 0 ? (
            <div className= "text-center py-8" >
            <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4" >
                <i className="fas fa-receipt text-white text-xl" > </i>
                    </div>
                    < p className = "text-white/70" > No expenses yet.Add your first expense to get started! </p>
                        </div>
                            ) : (
            <div className= "space-y-3" >
            {
                group.expenses.slice().reverse().map(expense => {
                    const paidByMember = group.members.find(m => m.id === expense.paidBy);
                    return (
                        <div key= { expense.id } className = "expense-item glass-morphism rounded-xl p-4" >
                            <div className="flex items-center justify-between" >
                                <div className="flex items-center space-x-4" >
                                    <div className="w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl flex items-center justify-center" >
                                        <span className="text-white text-lg" > { getCategoryIcon(expense.category)
            } </span>
            </div>
            < div >
            <h4 className="font-semibold text-white" > { expense.description } </h4>
                < div className = "flex items-center space-x-2 text-sm text-white/60" >
                    <span>Paid by { paidByMember?.name } </span>
                        <span>•</span>
                            < span > { formatDate(expense.date) } </span>
                            </div>
                            </div>
                            </div>
                            < div className = "text-right" >
                                <p className="text-lg font-bold text-white" > { formatCurrency(expense.amount) } </p>
                                    < p className = "text-sm text-white/60" > { expense.category } </p>
                                        </div>
                                        </div>
                                        </div>
                                        );
    })
}
</div>
                            )}
</div>
                    )}

<AddExpenseModal
                        isOpen={ showAddExpense }
onClose = {() => setShowAddExpense(false)}
group = { group }
onAddExpense = { onAddExpense }
    />

    {/* Invite Modal */ }
    < Modal isOpen = { showInviteModal } onClose = {() => setShowInviteModal(false)} title = "Invite Members" >
        <div className="text-center space-y-4" >
            <p className="text-white/80" > Share this invite code with your friends: </p>
                < div className = "glass-morphism border-2 border-white/30 rounded-xl p-4" >
                    <p className="text-3xl font-mono font-bold text-yellow-300 tracking-widest" > { group.inviteCode } </p>
                        </div>
                        < Button onClick = { copyInviteCode } className = "w-full" >
                            <i className="fas fa-copy mr-2" > </i>Copy Invite Code
                                </Button>
                                </div>
                                </Modal>

{/* Group Settings Modal */ }
<Modal isOpen={ showGroupSettings } onClose = {() => setShowGroupSettings(false)} title = "Group Settings" >
    <div className="space-y-6" >
        <div className="glass-morphism rounded-xl p-4" >
            <h4 className="font-semibold text-white mb-2" > Group Information </h4>
                < div className = "space-y-2 text-sm text-white/70" >
                    <p><span className="font-medium" > Name: </span> {group.name}</p >
                        <p><span className="font-medium" > Created: </span> {formatDate(group.createdAt)}</p >
                            <p><span className="font-medium" > Members: </span> {group.members.length}</p >
                                <p><span className="font-medium" > Total Expenses: </span> {group.expenses.length}</p >
                                    </div>
                                    </div>

                                    < div className = "space-y-3" >
                                        { canDeleteGroup && (
                                            <Button 
                                        variant="danger"
onClick = { handleDeleteGroup }
className = "w-full"
    >
    <i className="fas fa-trash mr-2" > </i>Delete Group
        </Button>
                                )}

{
    canLeaveGroup && (
        <Button 
                                        variant="danger"
    onClick = { handleLeaveGroup }
    className = "w-full"
        >
        <i className="fas fa-sign-out-alt mr-2" > </i>Leave Group
            </Button>
                                )
}

{
    !canDeleteGroup && !canLeaveGroup && (
        <div className="text-center py-4" >
            <p className="text-white/70 text-sm" > You are the group admin </p>
                </div>
                                )
}
</div>
    </div>
    </Modal>
    </div>
            );
        };

const PersonalExpenses = () => {
    const [expenses, setExpenses] = useLocalStorage('personalExpenses', []);
    const [formData, setFormData] = useState({
        description: '',
        amount: '',
        category: ''
    });
    const { showNotification } = useNotification();

    const handleAddExpense = (e) => {
        e.preventDefault();

        const expense = {
            id: Date.now(),
            description: formData.description,
            amount: parseFloat(formData.amount),
            category: formData.category,
            date: new Date().toISOString().split('T')[0],
            timestamp: new Date().toISOString()
        };

        setExpenses(prev => [expense, ...prev]);
        setFormData({ description: '', amount: '', category: '' });
        showNotification(`Added ${expense.description} - ${formatCurrency(expense.amount)}`, 'success');
    };

    const handleDeleteExpense = (id) => {
        if (window.confirm('Delete this expense?')) {
            setExpenses(prev => prev.filter(expense => expense.id !== id));
            showNotification('Expense deleted', 'success');
        }
    };

    const categories = [
        { value: '', label: 'Select Category' },
        { value: 'Food & Dining', label: '🍽️ Food & Dining' },
        { value: 'Transportation', label: '🚗 Transportation' },
        { value: 'Shopping', label: '🛍️ Shopping' },
        { value: 'Entertainment', label: '🎬 Entertainment' },
        { value: 'Bills & Utilities', label: '⚡ Bills & Utilities' },
        { value: 'Healthcare', label: '🏥 Healthcare' },
        { value: 'Education', label: '📚 Education' },
        { value: 'Travel', label: '✈️ Travel' },
        { value: 'Other', label: '📦 Other' }
    ];

    return (
        <div className= "space-y-8 fade-in" >
        <h2 className="text-3xl font-bold text-white" > Personal Expenses </h2>

            < div className = "grid grid-cols-1 lg:grid-cols-3 gap-8" >
                {/* Add Expense Form */ }
                < div className = "glass-morphism rounded-2xl p-6" >
                    <div className="flex items-center space-x-3 mb-6" >
                        <div className="w-10 h-10 bg-gradient-to-r from-green-400 to-blue-500 rounded-xl flex items-center justify-center" >
                            <i className="fas fa-plus text-white" > </i>
                                </div>
                                < h3 className = "text-xl font-bold text-white" > Add Personal Expense </h3>
                                    </div>

                                    < form onSubmit = { handleAddExpense } className = "space-y-4" >
                                        <Input
                                    value={ formData.description }
    onChange = {(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
placeholder = "What did you spend on?"
required
    />

    <Input
                                    type="number"
step = "0.01"
icon = "fas fa-rupee-sign"
value = { formData.amount }
onChange = {(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}
placeholder = "0.00"
required
    />

    <Select
                                    options={ categories }
value = { formData.category }
onChange = {(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
required
    />

    <Button type="submit" className = "w-full" >
        <i className="fas fa-plus mr-2" > </i>Add Expense
            </Button>
            </form>
            </div>

{/* Expenses List */ }
<div className="lg:col-span-2 glass-morphism rounded-2xl p-6" >
    <h3 className="text-xl font-bold text-white mb-6" > Recent Personal Expenses </h3>
{
    expenses.length === 0 ? (
        <div className= "text-center py-12" >
        <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4" >
            <i className="fas fa-receipt text-white text-xl" > </i>
                </div>
                < h4 className = "text-lg font-medium text-white mb-2" > No personal expenses yet </h4>
                    < p className = "text-white/70" > Start tracking your personal expenses to see them here.</p>
                        </div>
                            ) : (
        <div className= "space-y-3" >
        {
            expenses.map(expense => (
                <div key= { expense.id } className = "expense-item glass-morphism rounded-xl p-4" >
                <div className="flex items-center justify-between" >
            <div className="flex items-center space-x-4" >
            <div className="w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl flex items-center justify-center" >
            <span className="text-white text-lg" > { getCategoryIcon(expense.category)
        } </span>
        </div>
        < div >
        <h4 className="font-semibold text-white" > { expense.description } </h4>
            < div className = "flex items-center space-x-2 text-sm text-white/60" >
                <span>{ expense.category } </span>
                <span>•</span>
                    < span > { formatDate(expense.date) } </span>
                    </div>
                    </div>
                    </div>
                    < div className = "flex items-center space-x-3" >
                        <span className="text-lg font-bold text-white" > { formatCurrency(expense.amount) } </span>
                            < button
    onClick = {() => handleDeleteExpense(expense.id)
}
className = "w-8 h-8 text-red-400 hover:text-red-300 hover:bg-red-500/20 rounded-lg flex items-center justify-center transition-all"
    >
    <i className="fas fa-trash text-sm" > </i>
        </button>
        </div>
        </div>
        </div>
                                    ))}
</div>
                            )}
</div>
    </div>
    </div>
            );
        };

const Navigation = ({ currentView, setCurrentView }) => {
    return (
        <nav className= "glass-morphism border-b border-white/20 sticky top-0 z-40" >
        <div className="max-w-7xl mx-auto px-6 py-4" >
            <div className="flex items-center justify-between" >
                <div className="flex items-center space-x-4" >
                    <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center pulse-glow" >
                        <i className="fas fa-users text-white text-xl" > </i>
                            </div>
                            < div >
                            <h1 className="text-2xl font-bold text-white" > GroupVault </h1>
                                < p className = "text-xs text-white/70" > Split expenses with friends </p>
                                </div>
                                </div>

                                < div className = "flex items-center space-x-4" >
                                    <button 
                                    onClick={ () => setCurrentView('groups') }
    className = {`px-4 py-2 rounded-xl transition-all ${currentView === 'groups'
            ? 'btn-primary text-white'
            : 'glass-morphism text-white/70 hover:text-white'
        }`
}
                                >
    <i className="fas fa-users mr-2" > </i>Groups
        </button>
        < button
onClick = {() => setCurrentView('personal')}
className = {`px-4 py-2 rounded-xl transition-all ${currentView === 'personal'
        ? 'btn-primary text-white'
        : 'glass-morphism text-white/70 hover:text-white'
    }`}
                                >
    <i className="fas fa-user mr-2" > </i>Personal
        </button>
        < Avatar name = "John Doe" />
            </div>
            </div>
            </div>
            </nav>
            );
        };

// Main App Component
const App = () => {
    const [selectedGroup, setSelectedGroup] = useState(null);
    const [groups, setGroups] = useLocalStorage('groupExpenseGroups', []);
    const { showNotification } = useNotification();

    // Initialize with sample data
    useEffect(() => {
        if (groups.length === 0) {
            const sampleGroup = {
                id: 1,
                name: 'Goa Trip 2024',
                description: 'Beach vacation with friends',
                type: 'trip',
                inviteCode: 'GOA24X',
                members: [
                    { id: 1, name: 'You', email: 'you@example.com', isAdmin: true },
                    { id: 2, name: 'Jane Smith', email: 'jane@example.com', isAdmin: false },
                    { id: 3, name: 'Mike Johnson', email: 'mike@example.com', isAdmin: false }
                ],
                expenses: [
                    {
                        id: 1,
                        description: 'Hotel Booking',
                        amount: 15000,
                        category: 'Accommodation',
                        paidBy: 1,
                        splitType: 'equal',
                        splitDetails: {
                            1: { included: true, amount: 5000 },
                            2: { included: true, amount: 5000 },
                            3: { included: true, amount: 5000 }
                        },
                        date: '2024-01-15',
                        timestamp: '2024-01-15T10:30:00Z'
                    },
                    {
                        id: 2,
                        description: 'Dinner at Beach Shack',
                        amount: 2400,
                        category: 'Food & Dining',
                        paidBy: 2,
                        splitType: 'equal',
                        splitDetails: {
                            1: { included: true, amount: 800 },
                            2: { included: true, amount: 800 },
                            3: { included: true, amount: 800 }
                        },
                        date: '2024-01-16',
                        timestamp: '2024-01-16T20:30:00Z'
                    },
                    {
                        id: 3,
                        description: 'Taxi to Airport',
                        amount: 1200,
                        category: 'Transportation',
                        paidBy: 3,
                        splitType: 'equal',
                        splitDetails: {
                            1: { included: true, amount: 400 },
                            2: { included: true, amount: 400 },
                            3: { included: true, amount: 400 }
                        },
                        date: '2024-01-17',
                        timestamp: '2024-01-17T08:00:00Z'
                    }
                ],
                createdAt: '2024-01-10T00:00:00Z'
            };
            setGroups([sampleGroup]);
        }
    }, []);

    const handleCreateGroup = (newGroup) => {
        setGroups(prev => [...prev, newGroup]);
        showNotification(`Group "${newGroup.name}" created successfully!`, 'success');
    };

    const handleJoinGroup = (inviteCode) => {
        const existingGroup = groups.find(g => g.inviteCode === inviteCode);
        if (existingGroup) {
            showNotification('You are already a member of this group!', 'info');
        } else {
            showNotification('Group not found. Please check the invite code.', 'error');
        }
    };

    const handleDeleteGroup = (groupId) => {
        setGroups(prev => prev.filter(group => group.id !== groupId));
        setSelectedGroup(null);
    };

    const handleLeaveGroup = (groupId) => {
        setGroups(prev => prev.filter(group => group.id !== groupId));
        setSelectedGroup(null);
    };

    const handleGroupClick = (group) => {
        setSelectedGroup(group);
    };

    const handleAddGroupExpense = (expense) => {
        setGroups(prev => prev.map(group =>
            group.id === selectedGroup.id
                ? { ...group, expenses: [...group.expenses, expense] }
                : group
        ));
        setSelectedGroup(prev => ({ ...prev, expenses: [...prev.expenses, expense] }));
        showNotification(`Added ${expense.description} - ${formatCurrency(expense.amount)}`, 'success');
    };

    return (
        <AppContext.Provider value= {{ groups, setGroups, showNotification }
}>
    <div className="min-h-screen" >
        {/* Animated Background */ }
        < div className = "fixed inset-0 z-0" >
            <div className="absolute top-20 left-20 w-72 h-72 bg-purple-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" > </div>
                < div className = "absolute top-40 right-20 w-72 h-72 bg-yellow-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" > </div>
                    < div className = "absolute bottom-20 left-40 w-72 h-72 bg-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" > </div>
                        </div>

                        < Navigation />

                        <div className="relative z-10 max-w-7xl mx-auto px-6 py-8" >
                            {!selectedGroup && (
                                <GroupsList 
                                    groups={ groups }
onGroupClick = { handleGroupClick }
onCreateGroup = { handleCreateGroup }
onJoinGroup = { handleJoinGroup }
    />
                            )}

{
    selectedGroup && (
        <GroupDetail
                                    group={ selectedGroup }
    onBack = {() => setSelectedGroup(null)
}
onAddExpense = { handleAddGroupExpense }
onDeleteGroup = { handleDeleteGroup }
onLeaveGroup = { handleLeaveGroup }
    />
                            )}
</div>
    </div>
    </AppContext.Provider>
            );
        };

// Render the app
ReactDOM.render(<App />, document.getElementById('root'));
</script>
    <script>(function () { function c() { var b = a.contentDocument || a.contentWindow.document; if (b) { var d = b.createElement('script'); d.innerHTML = "window.__CF$cv$params={r:'9800289f14700abd',t:'MTc1ODAyMzU1Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);"; b.getElementsByTagName('head')[0].appendChild(d) } } if (document.body) { var a = document.createElement('iframe'); a.height = 1; a.width = 1; a.style.position = 'absolute'; a.style.top = 0; a.style.left = 0; a.style.border = 'none'; a.style.visibility = 'hidden'; document.body.appendChild(a); if ('loading' !== document.readyState) c(); else if (window.addEventListener) document.addEventListener('DOMContentLoaded', c); else { var e = document.onreadystatechange || function () { }; document.onreadystatechange = function (b) { e(b); 'loading' !== document.readyState && (document.onreadystatechange = e, c()) } } } })(); </script></body >
        </html>
